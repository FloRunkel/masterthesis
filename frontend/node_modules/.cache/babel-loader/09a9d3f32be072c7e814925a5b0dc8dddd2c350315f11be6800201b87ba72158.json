{"ast":null,"code":"var _jsxFileName = \"/Users/florianrunkel/Documents/02_Uni/04_Masterarbeit/masterthesis/frontend/src/components/candidates/ManualInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ExperienceForm from './ExperienceForm';\nimport ModelSelection from './ModelSelection';\nimport PredictionResult from './PredictionResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManualInput = () => {\n  _s();\n  const [experiences, setExperiences] = useState([{\n    company: '',\n    position: '',\n    startDate: '',\n    endDate: ''\n  }]);\n  const [modelType, setModelType] = useState('tft');\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleAddExperience = () => {\n    setExperiences([...experiences, {\n      company: '',\n      position: '',\n      startDate: '',\n      endDate: ''\n    }]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const response = await fetch('/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          experiences,\n          modelType\n        })\n      });\n      const data = await response.json();\n      setPrediction(data);\n    } catch (error) {\n      console.error('Fehler bei der Vorhersage:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"manual-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(ExperienceForm, {\n        experiences: experiences,\n        setExperiences: setExperiences,\n        onAddExperience: handleAddExperience\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModelSelection, {\n        modelType: modelType,\n        setModelType: setModelType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn-primary\",\n        children: \"Prognose erstellen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container-prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }, this), prediction && /*#__PURE__*/_jsxDEV(PredictionResult, {\n      prediction: prediction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ManualInput, \"t+lUPOBTxcIcDAV/oPVjF52kgPI=\");\n_c = ManualInput;\nexport default ManualInput;\nvar _c;\n$RefreshReg$(_c, \"ManualInput\");","map":{"version":3,"names":["React","useState","ExperienceForm","ModelSelection","PredictionResult","jsxDEV","_jsxDEV","ManualInput","_s","experiences","setExperiences","company","position","startDate","endDate","modelType","setModelType","prediction","setPrediction","loading","setLoading","handleAddExperience","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","className","children","onSubmit","onAddExperience","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/florianrunkel/Documents/02_Uni/04_Masterarbeit/masterthesis/frontend/src/components/candidates/ManualInput.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport ExperienceForm from './ExperienceForm';\nimport ModelSelection from './ModelSelection';\nimport PredictionResult from './PredictionResult';\n\nconst ManualInput = () => {\n  const [experiences, setExperiences] = useState([{ company: '', position: '', startDate: '', endDate: '' }]);\n  const [modelType, setModelType] = useState('tft');\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleAddExperience = () => {\n    setExperiences([...experiences, { company: '', position: '', startDate: '', endDate: '' }]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      const response = await fetch('/predict', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ experiences, modelType })\n      });\n      \n      const data = await response.json();\n      setPrediction(data);\n    } catch (error) {\n      console.error('Fehler bei der Vorhersage:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"manual-input\">\n      <form onSubmit={handleSubmit}>\n        <ExperienceForm \n          experiences={experiences}\n          setExperiences={setExperiences}\n          onAddExperience={handleAddExperience}\n        />\n        \n        <ModelSelection \n          modelType={modelType}\n          setModelType={setModelType}\n        />\n        \n        <button type=\"submit\" className=\"btn-primary\">\n          Prognose erstellen\n        </button>\n      </form>\n\n      {loading && <div className=\"loader-container-prediction\" />}\n      \n      {prediction && <PredictionResult prediction={prediction} />}\n    </div>\n  );\n};\n\nexport default ManualInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}